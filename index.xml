<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>signal in the noise</title>
    <link>http://Zsailer.github.io/</link>
    <description>Recent content on signal in the noise</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    
    <lastBuildDate>Wed, 28 Jan 2015 11:27:59 -0800</lastBuildDate>
    <atom:link href="http://Zsailer.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Launching your own Git Server</title>
      <link>http://zsailer.github.io/post/Launching%20your%20own%20Git%20Server/</link>
      <pubDate>Wed, 28 Jan 2015 11:27:59 -0800</pubDate>
      
      <guid>http://zsailer.github.io/post/Launching%20your%20own%20Git%20Server/</guid>
      <description>

&lt;p&gt;In this post, I will show how to host a Git on your own server. It&amp;rsquo;s like hosting your own local version of &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;, that you specifically manage traffic or host the data. In fact, I&amp;rsquo;ll show how to incorporate a GUI interface to this setup, called &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt;, to make the interface simpler for non-programmer users.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;GREAT&lt;/strong&gt; for &lt;em&gt;science research groups&lt;/em&gt; who are creating computational analysis, science software, or machine code that are used in collaborations inside and outside of their lab. In fact, that&amp;rsquo;s exactly why I&amp;rsquo;m using this. There is a clean, standardized version of the code that group members can clone and branch from. It&amp;rsquo;s much easier to manage the project with Git.&lt;/p&gt;

&lt;p&gt;Also, this avoids using completely public Git servers like Github, where your code is availabe to the public. Though I&amp;rsquo;m all about open science, open source, and reproducibility, there are times (specifically in Academia, unfortunately) where hacking together privately is appropriate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This guide is taken directly from Git&amp;rsquo;s documentation, but hopefully provides a simpler (and faster) set of directions for this solution to hosting your own server.&lt;/p&gt;

&lt;p&gt;Some of the authentication logistics is relatively hands-on for you as the admin. This leads to better security, since you are required to personally grant access to users.&lt;/p&gt;

&lt;h2 id=&#34;prepping-the-server:d4080c21c2f73c52b2cc215902d73a1f&#34;&gt;Prepping the server&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;This post assumes you have sudo permissions to the server.&lt;/em&gt; You are going to create a new user on this server that will host the collaborative Git repositories and allow &lt;em&gt;only&lt;/em&gt; system users to perform Git actions (clone, push, pull, branch, etc.) on these repositories. System users will only be able to access this user&amp;rsquo;s directory through Git.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s begin:&lt;/p&gt;

&lt;p&gt;Create the Git user&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo adduser git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will ask you for a password; it&amp;rsquo;s up to you whether you want this to be password protected.&lt;/p&gt;

&lt;p&gt;Now, we&amp;rsquo;re going to want to allow access to users on the system, using some form of authentication.&lt;/p&gt;

&lt;h2 id=&#34;ssh-public-keys:d4080c21c2f73c52b2cc215902d73a1f&#34;&gt;SSH public keys&lt;/h2&gt;

&lt;p&gt;Authentication is important when allowing users to access a private server. In this example, our server is a private local server, so we use the SSH protocol (fancy word for a standard procedure) to handle this. As the admin, you&amp;rsquo;ll manage user access to this server by storing authetication keys for each user. Let&amp;rsquo;s create this folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ su git
$ cd
$ mkdir .ssh &amp;amp;&amp;amp; chmod 700 .ssh
$ touch .ssh/authorized_keys &amp;amp;&amp;amp; chmod 600 .ssh.authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Authentication is confirmed using the SSH public key, so let&amp;rsquo;s make sure all users have one of these. These keys are held in the hidden &lt;code&gt;ssh&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re looking for two files: &lt;code&gt;id_rsa&lt;/code&gt; (or &lt;code&gt;id_dsa&lt;/code&gt;) and &lt;code&gt;id_rsa.pub&lt;/code&gt; (or&lt;code&gt;id_dsa.pub&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t have these files, you can generate them by typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It confirms a directory path to hold the key and asks for a password (you can leave this blank if you choose).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every user must have a SSH public key.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each user needs to send you (the server admin) the contents of &lt;code&gt;id_rsa.pub&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;add-an-authorized-user:d4080c21c2f73c52b2cc215902d73a1f&#34;&gt;Add an authorized User&lt;/h2&gt;

&lt;p&gt;Once you have their public key (contents in &lt;code&gt;id_rsa.pub&lt;/code&gt;), simply append everything in that file to the &lt;code&gt;authorized_keys&lt;/code&gt; file in the hidden folder &lt;code&gt;.ssh&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;start-a-project:d4080c21c2f73c52b2cc215902d73a1f&#34;&gt;Start a project&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The admin must always manually create a bare Git repository for each project before it can be hosted there.&lt;/strong&gt; Simply login as the new user, and type (assuming &lt;code&gt;&amp;lt;project_name&amp;gt;&lt;/code&gt; is whatever you name the project):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir &amp;lt;project_name&amp;gt;.git
$ cd &amp;lt;project_name&amp;gt;.git
$ git init --bare
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, an authenticated user can create that project on their own computer, add this remote server host (&lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; in the code below) to their repo, and push changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;project_name&amp;gt;
$ git init
$ git add .
$ git commit -m &#39;initial commit&#39;
$ git remote add origin git@&amp;lt;server&amp;gt;:&amp;lt;project_name&amp;gt;.git
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;while other authorized users can clone, pull and branch from the project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Begin</title>
      <link>http://zsailer.github.io/post/Let%27s%20Begin/</link>
      <pubDate>Sat, 24 Jan 2015 17:50:21 -0800</pubDate>
      
      <guid>http://zsailer.github.io/post/Let%27s%20Begin/</guid>
      <description>

&lt;h2 id=&#34;this-tells-it-all:3af354191679b595c8ea39f79cc1c8bc&#34;&gt;This tells it all&amp;hellip;&lt;/h2&gt;

&lt;p&gt;As usual, XKCD captures another frequent frustration&amp;hellip;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m hoping this blog becomes a resource of useful information/tutorials/explanations for scientists and programmers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://Zsailer.github.io/images/xkcd979.png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>