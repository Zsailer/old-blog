<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on signal in the noise</title>
    <link>http://Zsailer.github.io/post/</link>
    <description>Recent content in Posts on signal in the noise</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    
    <lastBuildDate>Fri, 24 Apr 2015 10:22:32 -0700</lastBuildDate>
    <atom:link href="http://Zsailer.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reproducible Electronic Notebooks</title>
      <link>http://zsailer.github.io/post/Reproducible%20Electronic%20Notebooks/</link>
      <pubDate>Fri, 24 Apr 2015 10:22:32 -0700</pubDate>
      
      <guid>http://zsailer.github.io/post/Reproducible%20Electronic%20Notebooks/</guid>
      <description>

&lt;h1 id=&#34;the-jupyter-notebook:1474e86c3d1a98e0f9d005dde1de2301&#34;&gt;The Jupyter Notebook&lt;/h1&gt;

&lt;p&gt;The practice of reproducible/open science makes every step of the scientific process for particular publication easily accessible, repeatable, and open for discussion. This implies that the procedure, the raw data, the processing code, and the plot-generating code are freely available, commented for understanding, and polished for sanity. Anyone interested in reviewing your material should easily follow your pipeline and be able to reproduce your output.&lt;/p&gt;

&lt;p&gt;This sounds like a ton of overhead work. Most of the time, the analysis of data is a bit half-hazard. We do a quick hack to plot results ASAP, so we can begin thinking about our interpretations and publication. We certainly do not want anyone else to see that ugly script we wrote in R to parse some files. And, we definitely do not want them to try and use it! And, we do not have the time to go back and clean up all these files and scripts we used for that one paper three years ago. Its not laziness; its trully the lack of time. We need a solution that will help us practice reproducibility on the fly; a tool where we can still hack, but others can still follow along.&lt;/p&gt;

&lt;p&gt;The Jupyter Notebook project (previously called IPython) provides an impressive solution. The Jupyter Notebook is stable, language agnostic electronic notebook. There have been a few attempts at creating an electronic notebook in recent years, none stand up the IPython Community. &lt;a href=&#34;https://try.jupyter.org&#34;&gt;Try it out for yourself!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-does-an-electronic-notebook-need:1474e86c3d1a98e0f9d005dde1de2301&#34;&gt;How does an electronic notebook need?&lt;/h2&gt;

&lt;p&gt;This section compiles a list of things that are necessary for an electronic notebook to be helpful.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Low costs for a lab&lt;/li&gt;
&lt;li&gt;Run code within notebook (but what language?)&lt;/li&gt;
&lt;li&gt;Word processor or Mark-up text for publications or notes.&lt;/li&gt;
&lt;li&gt;Equations in the text. (After all, this is a science notebook.)&lt;/li&gt;
&lt;li&gt;Plots in the notebook, below the code that generated it?&lt;/li&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Conversion to blogs, PDF, slides, etc.&lt;/li&gt;
&lt;li&gt;Easy to share with anyone&lt;/li&gt;
&lt;li&gt;Run on remote server&lt;/li&gt;
&lt;li&gt;Standardize across a lab&lt;/li&gt;
&lt;li&gt;Secure&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;jupyter-s-performance-as-an-electronic-notebook:1474e86c3d1a98e0f9d005dde1de2301&#34;&gt;Jupyter&amp;rsquo;s performance as an electronic notebook?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Low cost? How about &lt;strong&gt;free&lt;/strong&gt;? Jupyter notebook is completely free and open source for anyone to use. Simply download here. As a bonus, the open source community around the Jupyter Notebook is highly active and passionate about the project, so it is getting better everyday.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Originally called IPython Notebook (the &amp;ldquo;I&amp;rdquo; standing for &lt;strong&gt;Interactive&lt;/strong&gt; Python notebook), the Jupyter notebook is, first and foremost, an interactive computing environment. It is comprised of &lt;em&gt;cells&lt;/em&gt; that enable the user to write chunks of code and run them separately from the rest of the notebook. What language? You choose! The notebook is a language-agnostic frontend that runs code cells through kernels connecting it to any backend. In fact, the rename to &lt;strong&gt;Jupyter&lt;/strong&gt; Notebook was in acknowledgement of this agnosticism, highlighting the three core languages (Julia, Python, and R). However, many other kernels exist (such as Matlab, Octave, Javascript, etc.); see the list here. This means, you only need to learn one interface/frontend no matter how many languages you know.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The cells mentioned above can also be &lt;strong&gt;text&lt;/strong&gt; cells, rendered by Markdown. This is a lightweight mark-up language used in many blogging circles. Its &lt;strong&gt;very&lt;/strong&gt; easy to use and is explained further here. This almost makes the notebook a worthy blogging editor.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Equations can be written in Markdown cells using Latex syntax (via MathJax). Write a latex formula between double dollars signs to render the equation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The notebook plots figures inline with text and code. This might be one of the most attractive features of electronic notebooks in general. To enable this feature in the Jupyter notebook, one simply needs to run the following line of code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;%matplotlib inline&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The notebook is easy to install (site), intuitive to use, and includes many tutorials on the web. If you want example notebooks, you can flip through exampe notebooks here.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Jupyter notebook comes with a internal conversion API, called NBConvert. This allows you to output your notebooks as Latex/PDF documents, HTML pages, &lt;em&gt;interactive&lt;/em&gt; presentation slides (through reveal.js), and stand-alone scripts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Notebook can be saved into a lightweight format, called JSON, that makes sharing notebooks (even large ones) easy. If you want a notebook to be READ-ONLY, you can share the notebook using the NBViewer application online.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There are a few different ways to run the notebook on a remote server. The stable solution is to use &lt;strong&gt;Jupyterhub&lt;/strong&gt;. This allows you to set up a Jupyterhub server and allow users to connect through a password protected sign-in page (using server credentials or Github credentials).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Jupyterhub provides a great way to standardize your lab&amp;rsquo;s electronic notebooks. This implementation allows multiple users on a single server. No one &lt;em&gt;has&lt;/em&gt; to download the notebook or any dependencies locally on their machines. All these dependencies can be installed and loaded in one location, on a remote server, and everyone has access to the same programming environment.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The Jupyter Notebook has a large, active community constantly improving its performance. Chances are, if any bug exists, it will be fixed immediately. If you find a point of vulnerability or annoyance, you can post an issue to the community, and it will be fixed quickly!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;how-does-it-work:1474e86c3d1a98e0f9d005dde1de2301&#34;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;The Jupyter notebook is an web-application and interactive programming shell. That means, the frontend is hosted in a browser, written entirely in HTML, Javascript, and CSS. This is advantageous to the notebook&amp;rsquo;s design, providing nearly endless possibilities for future development and allowing the notebook to access libraries like MathJax (Latex rendering), D3 (data visualization library), etc. It also enables users to embed notebooks in blogs (simple HTML), share notebooks is a lightweight format (JSON data), run notebooks remotely through HTTP protocols (or the stable Jupyterhub, described below), add custom extensions easily, and build browser widgets for GUI interaction with data. Though the frontend is Javascript, the notebook server is entirely Python. This server manages the architecture of the notebook and handles all messaging between the frontend and code-executing &lt;strong&gt;kernel&lt;/strong&gt;. The kernel is the main machinery for executing the code (in its native language) written by a user. Amazingly, the Jupyter team designed the Notebook such that the kernel could be any language, making the Notebook language agnostic.&lt;/p&gt;

&lt;h2 id=&#34;above-and-beyond-more-jupyter-notebook-features:1474e86c3d1a98e0f9d005dde1de2301&#34;&gt;Above and beyond: more Jupyter Notebook features&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Widgets&lt;/strong&gt;: the Notebook includes many interactive widgets, like slidebars, accordians, user input, etc. that allow one to interact with plots using these GUIs. You can also easily design your own widget.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Terminal&lt;/strong&gt;: the Notebook includes a terminal in the web-application that allows your to navigate the local filesystem using your local terminal environment. You can even launch an IPython terminal within an IPython Notebook!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;VIM and Emacs Shortcuts&lt;/strong&gt;: the notebook has two modes, edit and command mode, which allow you to quickly navigate notebook editing through shortcuts like VIM and Emacs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Google Drive&lt;/strong&gt;: recently, the Jupyter team integrated the Notebook with Google Drive. Now you can share and run notebooks on Google Drive using this extension.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>How I use IPython (Jupyter) Notebooks everyday</title>
      <link>http://zsailer.github.io/post/How%20I%20use%20IPython%20%28Jupyter%29%20Notebooks%20everyday/</link>
      <pubDate>Tue, 03 Mar 2015 15:14:45 -0800</pubDate>
      
      <guid>http://zsailer.github.io/post/How%20I%20use%20IPython%20%28Jupyter%29%20Notebooks%20everyday/</guid>
      <description>&lt;p&gt;The Jupyter (IPython) notebook is an awesome tool. (Skip to section below to hear about how awesome!)&lt;/p&gt;

&lt;p&gt;I thought it might be useful to demostrate how one might go about using the notebook for everyday research. Unfortunately, I&amp;rsquo;ve found many scientists intimidated to try the notebook because they don&amp;rsquo;t know where to start.&lt;/p&gt;

&lt;p&gt;Also, let me say this: you don&amp;rsquo;t have to a Python programmer to use the Notebook. If you like R, fine. Check out the IRKernel (link). If you are an engineer/physicists (as I am) Matlab or Octave might be your language. Cool, here you go!&lt;/p&gt;

&lt;p&gt;These include:
* Plotting inline (via Matplotlib)
* Markdown and Latex syntax
* Widgets (interacting with plots and variables using graphical user interaces.)&lt;/p&gt;

&lt;p&gt;The Jupyter (IPython) Notebook is an incredible tool to use inside and outside academia. In fact, I would argue, anyone who programs to process and share data/information should be using the Jupyter notebook. The recent decision by the core team to make the notebook completely language agnostic and the development of many language kernels, there is no excuse not to use it.&lt;/p&gt;

&lt;p&gt;If you aren&amp;rsquo;t convinced by the unifying of many languages under a single interactive programming shell, then maybe their future (and current development) direction will attract you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Launching your own Git Server</title>
      <link>http://zsailer.github.io/post/Launching%20your%20own%20Git%20Server/</link>
      <pubDate>Wed, 28 Jan 2015 11:27:59 -0800</pubDate>
      
      <guid>http://zsailer.github.io/post/Launching%20your%20own%20Git%20Server/</guid>
      <description>

&lt;p&gt;In this post, I will show how to host a Git on your own server. It&amp;rsquo;s like hosting your own local version of &lt;a href=&#34;https://github.com/&#34;&gt;Github&lt;/a&gt;, that you specifically manage traffic or host the data. In fact, I&amp;rsquo;ll show how to incorporate a GUI interface to this setup, called &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt;, to make the interface simpler for non-programmer users.&lt;/p&gt;

&lt;p&gt;This is &lt;strong&gt;GREAT&lt;/strong&gt; for &lt;em&gt;science research groups&lt;/em&gt; who are creating computational analysis, science software, or machine code that are used in collaborations inside and outside of their lab. In fact, that&amp;rsquo;s exactly why I&amp;rsquo;m using this. There is a clean, standardized version of the code that group members can clone and branch from. It&amp;rsquo;s much easier to manage the project with Git.&lt;/p&gt;

&lt;p&gt;Also, this avoids using completely public Git servers like Github, where your code is availabe to the public. Though I&amp;rsquo;m all about open science, open source, and reproducibility, there are times (specifically in Academia, unfortunately) where hacking together privately is appropriate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This guide is taken directly from Git&amp;rsquo;s documentation, but hopefully provides a simpler (and faster) set of directions for this solution to hosting your own server.&lt;/p&gt;

&lt;p&gt;Some of the authentication logistics is relatively hands-on for you as the admin. This leads to better security, since you are required to personally grant access to users.&lt;/p&gt;

&lt;h2 id=&#34;prepping-the-server:d4080c21c2f73c52b2cc215902d73a1f&#34;&gt;Prepping the server&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;This post assumes you have sudo permissions to the server.&lt;/em&gt; You are going to create a new user on this server that will host the collaborative Git repositories and allow &lt;em&gt;only&lt;/em&gt; system users to perform Git actions (clone, push, pull, branch, etc.) on these repositories. System users will only be able to access this user&amp;rsquo;s directory through Git.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s begin:&lt;/p&gt;

&lt;p&gt;Create the Git user&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo adduser git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will ask you for a password; it&amp;rsquo;s up to you whether you want this to be password protected.&lt;/p&gt;

&lt;p&gt;Now, we&amp;rsquo;re going to want to allow access to users on the system, using some form of authentication.&lt;/p&gt;

&lt;h2 id=&#34;ssh-public-keys:d4080c21c2f73c52b2cc215902d73a1f&#34;&gt;SSH public keys&lt;/h2&gt;

&lt;p&gt;Authentication is important when allowing users to access a private server. In this example, our server is a private local server, so we use the SSH protocol (fancy word for a standard procedure) to handle this. As the admin, you&amp;rsquo;ll manage user access to this server by storing authetication keys for each user. Let&amp;rsquo;s create this folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ su git
$ cd
$ mkdir .ssh &amp;amp;&amp;amp; chmod 700 .ssh
$ touch .ssh/authorized_keys &amp;amp;&amp;amp; chmod 600 .ssh.authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Authentication is confirmed using the SSH public key, so let&amp;rsquo;s make sure all users have one of these. These keys are held in the hidden &lt;code&gt;ssh&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re looking for two files: &lt;code&gt;id_rsa&lt;/code&gt; (or &lt;code&gt;id_dsa&lt;/code&gt;) and &lt;code&gt;id_rsa.pub&lt;/code&gt; (or&lt;code&gt;id_dsa.pub&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t have these files, you can generate them by typing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It confirms a directory path to hold the key and asks for a password (you can leave this blank if you choose).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Every user must have a SSH public key.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each user needs to send you (the server admin) the contents of &lt;code&gt;id_rsa.pub&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;add-an-authorized-user:d4080c21c2f73c52b2cc215902d73a1f&#34;&gt;Add an authorized User&lt;/h2&gt;

&lt;p&gt;Once you have their public key (contents in &lt;code&gt;id_rsa.pub&lt;/code&gt;), simply append everything in that file to the &lt;code&gt;authorized_keys&lt;/code&gt; file in the hidden folder &lt;code&gt;.ssh&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;start-a-project:d4080c21c2f73c52b2cc215902d73a1f&#34;&gt;Start a project&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The admin must always manually create a bare Git repository for each project before it can be hosted there.&lt;/strong&gt; Simply login as the new user, and type (assuming &lt;code&gt;&amp;lt;project_name&amp;gt;&lt;/code&gt; is whatever you name the project):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir &amp;lt;project_name&amp;gt;.git
$ cd &amp;lt;project_name&amp;gt;.git
$ git init --bare
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, an authenticated user can create that project on their own computer, add this remote server host (&lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; in the code below) to their repo, and push changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd &amp;lt;project_name&amp;gt;
$ git init
$ git add .
$ git commit -m &#39;initial commit&#39;
$ git remote add origin git@&amp;lt;server&amp;gt;:&amp;lt;project_name&amp;gt;.git
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;while other authorized users can clone, pull and branch from the project.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Begin</title>
      <link>http://zsailer.github.io/post/Let%27s%20Begin/</link>
      <pubDate>Sat, 24 Jan 2015 17:50:21 -0800</pubDate>
      
      <guid>http://zsailer.github.io/post/Let%27s%20Begin/</guid>
      <description>

&lt;h2 id=&#34;this-tells-it-all:3af354191679b595c8ea39f79cc1c8bc&#34;&gt;This tells it all&amp;hellip;&lt;/h2&gt;

&lt;p&gt;As usual, XKCD captures another frequent frustration&amp;hellip;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m hoping this blog becomes a resource of useful information/tutorials/explanations for scientists and programmers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://Zsailer.github.io/images/xkcd979.png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>